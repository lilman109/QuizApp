{"version":3,"sources":["API.ts","utils.ts","QuestionCard.styles.ts","components/QuestionCard.tsx","images/bg.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BG","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUerAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","nextQuestion","prev","length","undefined","e","currentTarget","answerObject","TOTAL_QUESTIONS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5fb4fa4.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty_answer: string;\n\tincorrect_answers: string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = 'easy',\n\tMEDIUM = 'medium',\n\tHARD = 'hard',\n}\n\nexport const fetchQuizQuestions = async (\n\tamount: number,\n\tdifficulty: Difficulty\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json();\n\n\treturn data.results.map((question: Question) => {\n\t\treturn {\n\t\t\t...question,\n\t\t\tanswers: shuffleArray([\n\t\t\t\t...question.incorrect_answers,\n\t\t\t\tquestion.correct_answer,\n\t\t\t]),\n\t\t};\n\t});\n};\n","export const shuffleArray = (array: any[]) => {\n\treturn [...array].sort(() => Math.random() - 0.5);\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n\tmax-width: 1100px;\n\tbackground: #ebfeff;\n\tborder-radius: 10px;\n\tborder: 2px solid #0085a3;\n\tpadding: 20px;\n\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\ttext-align: center;\n\n\tp {\n\t\tfont-size: 1rem;\n\t}\n`;\n\ntype ButtonWrapperProps = {\n\tcorrect: boolean;\n\tuserClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n\ttransition: all 0.3s ease;\n\n\t:hover {\n\t\topacity: 0.8;\n\t}\n\n\tbutton {\n\t\tcursor: pointer;\n\t\tuser-select: none;\n\t\tfont-size: 0.8rem;\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tmargin: 5px 0;\n\t\tbackground: ${({ correct, userClicked }) =>\n\t\t\tcorrect\n\t\t\t\t? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n\t\t\t\t: !correct && userClicked\n\t\t\t\t? 'linear-gradient(90deg, #ff5656, #c16868)'\n\t\t\t\t: 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n\t\tborder: 3px solid #fff;\n\t\tbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n\t\tcolor: #fff;\n\t\ttext-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n\t}\n`;\n","import React from 'react';\n\nimport { AnswerObject } from '../App';\n\nimport { Wrapper, ButtonWrapper } from '../QuestionCard.styles';\n\ntype Props = {\n\tquestion: string;\n\tanswers: string[];\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n\tuserAnswer: AnswerObject | undefined;\n\tquestionNumber: number;\n\ttotalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNumber,\n\ttotalQuestions,\n}) => {\n\treturn (\n\t\t<>\n\t\t\t<Wrapper>\n\t\t\t\t<p className='number'>\n\t\t\t\t\tQuestion: {questionNumber} / {totalQuestions}\n\t\t\t\t</p>\n\t\t\t\t<p dangerouslySetInnerHTML={{ __html: question }} />\n\t\t\t\t<div>\n\t\t\t\t\t{answers.map((answer) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ButtonWrapper\n\t\t\t\t\t\t\t\tkey={answer}\n\t\t\t\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\n\t\t\t\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tdisabled={!!userAnswer}\n\t\t\t\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\t\t\t\tonClick={callback}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }}></span>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</ButtonWrapper>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n};\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/bg.5d1966a6.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BG from './images/bg.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%\n  }\n\n  body {\n    background-image: url(${BG});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: \"Catamaran\", sans-serif;\n  }\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\t> p {\n\t\tcolor: #fff;\n\t}\n\n\t.score {\n\t\tcolor: #fff;\n\t\tfont-size: 2rem;\n\t\tmargin: 0;\n\t}\n\n\th1 {\n\t\tfont-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold',\n\t\t\tsans-serif, Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\n\n\t\tbackground-image: linear-gradient(180deg, #fff, #87f1ff);\n\t\tbackground-size: 100%;\n\t\tbackground-clip: text;\n\t\t-webkit-background-clip: text;\n\t\t-webkit-text-fill-color: transparent;\n\t\t-moz-background-clip: text;\n\t\t-moz-text_fill-color: transparent;\n\t\tfilter: drop-shadow(2px 2px #0085a3);\n\t\tfont-size: 70px;\n\t\tfont-weight: 400;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n\n\t.start,\n\t.next_question {\n\t\tcursor: pointer;\n\t\tbackground: linear-gradient(180deg, #fff, #ffcc91);\n\t\tborder: 2px sold #d38558;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\t\tborder-radius: 10px;\n\t\theight: 40px;\n\t\tmargin: 20px 0;\n\t\tpadding: 0 40px;\n\t}\n\n\t.start {\n\t\tmax-width: 200px;\n\t}\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n\nimport QuestionCard from './components/QuestionCard';\n\nimport { QuestionState, Difficulty } from './API';\n\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUerAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconsole.log(questions);\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\tTOTAL_QUESTIONS,\n\t\t\tDifficulty.EASY\n\t\t);\n\n\t\tconsole.log(nextQuestion);\n\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUerAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\n\t\t\tif (correct) setScore((score) => score + 1);\n\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\n\t\t\tsetUerAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\tconst nextQuestion = number + 1;\n\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber((prev) => prev + 1);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<Wrapper>\n\t\t\t\t<h1>React Quiz</h1>\n\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{!gameOver && <p className='score'>Score: {score}</p>}\n\t\t\t\t{loading && <p className='loading_question'>Loading Questions...</p>}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNumber={number + 1}\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{!gameOver &&\n\t\t\t\t!loading &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t<button className='next_question' onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}